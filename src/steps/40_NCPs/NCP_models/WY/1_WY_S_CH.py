# coding=UTF-8
# -----------------------------------------------
# Generated by InVEST 3.8.9 on Wed Oct 20 16:21:06 2021
# Model: Hydropower Water Yield
# This script specifies the arguments for the InVEST Hydropower Water Yield
# model and then runs it.

import sys
from os.path import join, dirname
from shutil import rmtree

import natcap.invest.annual_water_yield

sys.path.append(join(dirname(__file__), '..'))
from load_params import load_params

params = load_params(
    check_params=[
        ['run_params', 'NCP_RUN_SCENARIO_ID'],
        ['run_params', 'NCP_RUN_YEAR'],
        ['run_params', 'NCP_RUN_OUTPUT_DIR'],
        ['data', 'lulc'],
        ['data', 'depth_to_root_rest_layer'],
        ['data', 'eto'],
        ['data', 'pawc'],
        ['data', 'yearly_precipitation'],
        ['data', 'watersheds'],
        ['data', 'sub_watersheds'],
        ['WY', 'biophysical_table_path'],
        # ['WY', 'do_scarcity_and_valuation'],
        ['WY', 'seasonality_constant'],
        ['other', 'n_workers'],
    ]
)

args = {
    'lulc_path': params['data']['lulc'],
    'biophysical_table_path': params['WY']['biophysical_table_path'],
    'depth_to_root_rest_layer_path': params['data']['depth_to_root_rest_layer'],
    # 'do_scarcity_and_valuation': params['WY']['do_scarcity_and_valuation'],
    'eto_path': params['data']['eto'],
    'pawc_path': params['data']['pawc'],
    'precipitation_path': params['data']['yearly_precipitation'],
    'seasonality_constant': params['WY']['seasonality_constant'],
    'watersheds_path': params['data']['watersheds'],
    'sub_watersheds_path': params['data']['sub_watersheds'],
    'n_workers': params['other']['n_workers'],
    'workspace_dir': (work_dir := join(
        params['run_params']['NCP_RUN_OUTPUT_DIR'],
        params['run_params']['NCP_RUN_SCENARIO_ID'],
        'WY',
        params['run_params']['NCP_RUN_YEAR'])),
}

if __name__ == '__main__':
    print("WY: Starting Hydropower Water Yield model...")
    natcap.invest.annual_water_yield.execute(args)
    print("WY: ...done!")

    if params['other']['remove_temp_files']:
        # remove intermediate outputs
        intermediate_output_dir = join(work_dir, 'intermediate_outputs')
        print(f"Removing intermediate outputs in {intermediate_output_dir}")
        # delete folder
        rmtree(intermediate_output_dir)
