# coding=UTF-8
# -----------------------------------------------
# Generated by InVEST 3.8.9 on Thu Jun  3 12:44:55 2021
# Model: Habitat Quality
# -----------------------------------------------
# This script runs the Habitat Quality model from InVEST. Nothing else is
# done except to define the parameters and input files, and then run the model.
import sys
from os import makedirs, symlink, unlink
from os.path import join, isdir, dirname, relpath, islink
from shutil import copyfile, rmtree

sys.path.append(join(dirname(__file__), '..'))
from load_params import load_params

params = load_params(
    check_params=[
        ['run_params', 'NCP_RUN_SCENARIO_ID'],
        ['run_params', 'NCP_RUN_YEAR'],
        ['run_params', 'NCP_RUN_OUTPUT_DIR'],
        ['run_params', 'NCP_RUN_SCRATCH_DIR'],
        ['data', 'lulc'],
        ['HAB', 'half_saturation_constant'],
        ['HAB', 'sensitivity_table_path'],
        ['HAB', 'threats_table_path'],
        ['HAB', 'bp_table_path'],
        ['other', 'n_workers'],
    ]
)

import natcap.invest.habitat_quality

# inject current threat_layer_dir into new {threat_layer_dir}/threats.csv
threats_path = params['HAB']['threats_table_path']
bp_table_path = params['HAB']['bp_table_path']
scratch_dir = str(join(
    params['run_params']['NCP_RUN_SCRATCH_DIR'],
    params['run_params']['NCP_RUN_SCENARIO_ID'],
    'HAB',
    params['run_params']['NCP_RUN_YEAR']))
if not isdir(scratch_dir):
    makedirs(scratch_dir)
current_threats_path = join(scratch_dir, 'threats.csv')

# # Symlink threats.csv, pr_rd_c.tif and sc_rd_c.tif to scratch_dir:
# if islink(current_threats_path):
#     unlink(current_threats_path)
# symlink(threats_path, current_threats_path)
# if islink(join(scratch_dir, 'pr_rd_c.tif')):
#     unlink(join(scratch_dir, 'pr_rd_c.tif'))
# symlink(join(bp_table_path, 'layer_build', 'LAYERPROD', 'pr_rd_c.tif'),
#         join(scratch_dir, 'pr_rd_c.tif'))
# if islink(join(scratch_dir, 'sc_rd_c.tif')):
#     unlink(join(scratch_dir, 'sc_rd_c.tif'))
# symlink(join(bp_table_path, 'layer_build', 'LAYERPROD', 'sc_rd_c.tif'),
#         join(scratch_dir, 'sc_rd_c.tif'))
# Using symlinks saves time and space, but have some problems when using
# a scratch dir on a different filesystem.
# Copy threats.csv, pr_rd_c.tif and sc_rd_c.tif to scratch_dir:
copyfile(threats_path, current_threats_path)
copyfile(join(bp_table_path, 'layer_build', 'LAYERPROD', 'pr_rd_c.tif'),
         join(scratch_dir, 'pr_rd_c.tif'))
copyfile(join(bp_table_path, 'layer_build', 'LAYERPROD', 'sc_rd_c.tif'),
         join(scratch_dir, 'sc_rd_c.tif'))

out_dir = join(
    params['run_params']['NCP_RUN_OUTPUT_DIR'],
    params['run_params']['NCP_RUN_SCENARIO_ID'],
    'HAB',
    params['run_params']['NCP_RUN_YEAR'])
# Check if the output directory exists, if not create it
if not isdir(out_dir):
    makedirs(out_dir)

args = {
    # This dictionary contains the input parameters required to run the NDR
    # model. Each key-value pair specifies a parameter and its corresponding
    # value.
    'half_saturation_constant': params['HAB']['half_saturation_constant'],
    'lulc_cur_path': params['data']['lulc'],
    'sensitivity_table_path': params['HAB']['sensitivity_table_path'],
    'threats_table_path': current_threats_path,
    'n_workers': params['other']['n_workers'],
    'workspace_dir': out_dir,
}
print(f"Half saturation constant: {args['half_saturation_constant']}")
print(f"LULC path: {args['lulc_cur_path']}")
print(f"Sensitivity table path: {args['sensitivity_table_path']}")
print(f"Threats table path: {args['threats_table_path']}")
print(f"Number of workers: {args['n_workers']}")
print(f"Workspace directory: {args['workspace_dir']}")
# Executing Model calculation
if __name__ == '__main__':
    print("HAB: Starting Habitat Quality model...")
    natcap.invest.habitat_quality.execute(args)
    print("HAB: ...done!")
    # NOTE: For natcap.invest 3.13.0
    # There is a bug which lowers also the path of the threat layers
    # Hotfix in habitat_quality.py line 384 (execute function):
    # Change from:
    #             args['threats_table_path'], 'THREAT', to_lower=True,
    # to:
    #             args['threats_table_path'], 'threat', to_lower=False,

    if params['other']['remove_temp_files']:
        # remove intermediate outputs
        intermediate_output_dir = join(out_dir, 'intermediate')
        print(f"Removing intermediate outputs in {intermediate_output_dir}")
        # delete folder
        rmtree(intermediate_output_dir)
